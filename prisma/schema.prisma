generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    BUSINESS_OWNER
    ADMIN
}

enum BusinessType {
    KIRANA_SHOP
    CLINIC
    SCHOOL
    SALON
    RESTAURANT
    NBFC
    COACHING_CENTER
    SERVICE_PROVIDER
    OTHER
}

enum PreferredLanguage {
    ENGLISH
    HINDI
    BENGALI
    MARATHI
    TAMIL
    TELUGU
    KANNADA
    NEPALI
    URDU
}

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    emailVerified        DateTime?
    password             String?
    name                 String
    image                String    @default("https://res.cloudinary.com/dhfuckcax/image/upload/v1739810646/krk8x7fzjukcfcoefrea.jpg")
    role                 Role      @default(USER)
    roleExplicitlyChosen Boolean   @default(false)
	createdAt            DateTime  @default(now())
    updatedAt            DateTime  @updatedAt

    // Voice Platform Specific Fields
    businessName         String?
    businessType         BusinessType?
    phoneNumber          String?
    preferredLanguage    PreferredLanguage @default(ENGLISH)
    industry             String?           // Free text for specific industry
    location             String?           // City/State for regional customization
    onboardingCompleted  Boolean   @default(false)
    
    // Usage tracking
    callsUsed            Int       @default(0)
    callsLimit           Int       @default(100)  // Free tier limit
    subscriptionTier     String    @default("free") // free, starter, growth, business
    subscriptionExpiry   DateTime?

    // Email verification
    verificationToken    String?   @unique
    verificationTokenExpiry DateTime?

    // Password reset
    resetToken           String?   @unique
    resetTokenExpiry     DateTime?

    accounts              Account[]

    @@index([email])
    @@index([businessType])
    @@index([preferredLanguage])
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}
